// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    //provider = "sqlite"
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String    @id @default(cuid())
    name                String?
    email               String?   @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    // Add your own model fields here
    hasCompletedProfile Boolean   @default(false)
    phone               String?
    phoneVerified       DateTime?
    address             Address?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// NextAuth models end

model Admin {
    id          String   @id @default(cuid())
    email       String   @unique
    password    String
    accessToken String   @unique @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Worker {
    id        String   @id @default(cuid())
    firstName String?
    lastName  String?
    phone     String //@unique
    age       Int?
    gender    Gender?
    imageUrl  String?
    NID       String   @unique
    address   Address? @relation(fields: [addressId], references: [id])
    addressId String?
    verified  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Gender {
    Male
    Female
}

model Address {
    id           String     @id @default(cuid())
    description  String?
    postOffice   PostOffice @relation(fields: [postOfficeId], references: [id])
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    Worker       Worker[]
    user         User       @relation(fields: [userId], references: [id])
    userId       String     @unique
    postOfficeId String
}

// model Division {
//     id        String     @id @default(cuid())
//     name      String     @unique
//     createdAt DateTime   @default(now())
//     updatedAt DateTime   @updatedAt
//     District  District[]
//     Address   Address[]
// }

// model District {
//     id         String    @id @default(cuid())
//     name       String
//     division   Division  @relation(fields: [divisionId], references: [id])
//     divisionId String
//     createdAt  DateTime  @default(now())
//     updatedAt  DateTime  @updatedAt
//     Upazila    Upazila[]
//     Address    Address[]
// }

// model Upazila {
//     id         String       @id @default(cuid())
//     name       String
//     district   District     @relation(fields: [districtId], references: [id])
//     districtId String
//     createdAt  DateTime     @default(now())
//     updatedAt  DateTime     @updatedAt
//     PostOffice PostOffice[]
//     Address    Address[]
// }

model PostOffice {
    id        String    @id @default(cuid())
    name      String
    postCode  String    @unique
    province  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Address   Address[]
    Service   Service?  @relation(fields: [serviceId], references: [id])
    serviceId String?
}

model Category {
    id           String    @id @default(cuid())
    categoryName String
    details      String?
    Service      Service[]
}

model Service {
    id          String        @id @default(cuid())
    serviceName String
    avgRating   Float         @default(0)
    serviceArea PostOffice[]
    criticality Criticality[]
    Category    Category?     @relation(fields: [categoryId], references: [id])
    categoryId  String?
}

model Criticality {
    id              String   @id @default(cuid())
    criticalityName String
    description     String?
    price           Int
    Service         Service? @relation(fields: [serviceId], references: [id])
    serviceId       String?
}
